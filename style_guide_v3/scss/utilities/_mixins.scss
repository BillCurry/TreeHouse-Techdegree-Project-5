// /*Inside your mixins partial, youâ€™ll want to create mixins for:
// Media Queries
// Flexbox settings
// Element and Modifier BEM Selectors*/

// // ==========================================================================
// // Mixins
// // ==========================================================================

// // BEM selectors

@mixin e($element) {
    &__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// // Generate modifier color classes

@mixin bg-colors($map) {
    @each $theme, $color in $map {
        &--#{$theme} {
            background-color: $color;
        }
    }
}

//Flexbox Mixin
@mixin flexy (
  $disp: flex,
  $dir: null,
  $wrap: null,
  $just: null) {
    display: $disp;
    flex-direction: $dir;
    flex-wrap: $wrap;
    justify-content: $just;
  }



// Media queries

@mixin mq($break) {
  @if $break == "small" {
    @media (min-width:$brkpoint-sm) and (max-width:$brkpoint-md) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width:$brkpoint-md + 1) {
      @content;
    }
  }
  @else if $break == "large" {
    @media (min-width:$brkpoint-lg) {
      @content;
    }
  }
  @else {
    @error "No value could be retrieved for `#{$break}`."
  }
}

// Grid columns
@mixin g-columns {
    @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;//gives us the total width of all columns and gutters, based on the col-count
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}