
.container {
  @extend %center-element;
  padding: 0 1em .5em 1em;
  @extend %base-text;
  width: 90%;
  max-width: $g-cont-max-w;
}

.grid__row {
  @include flexy ($dir:column, $just:center);
  margin-bottom: 1em;
  @include mq(medium) {
    @include flexy($dir:row, $just:space-between);
  }
}


[class^="grid__col--"] {
    @extend %center-element;
    @extend %block-element;
    @extend %full-width;
    margin-top: em(12px);
    margin-bottom: em(12px);
    border-radius: $br--default;
    padding: 15px 30px;
    height: auto;
    border: 0;
    color: palette(gray);
    font-size : em(16px);
    font-weight: $font-weight--medium;
    // margin-bottom: 25px;
    @include mq(medium){
      @include flexy ($dir:row, $just:space-around);
    }
  }


//this rule decreases the margin-top of grid__col siblings to match layout in mobile view
  [class^="grid__col--"] + [class^="grid__col--"] {
  @include mq(small) {
    margin-top: em(-5px);
  }
}



 //this targets elements in the grid system that share the theme color class and grid__col class and provides a background color from my source map ($col-colors) in my variables partial
.theme__colors.grid {
    &__col {
      @include bg-colors($col-colors);
    }
}

.grid__col {
  @include mq(medium) {
    @include g-columns;
  }
}
// // // Calculate grid columns
// @include mq(medium) {
//   @for $i from 1 through $g-col-count {
//     $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;//gives us the total width of all columns and gutters, based on the col-count
//     $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

//     // Generate column modifier classes
//     .grid__col--#{$i} {
//       width: percentage($target / $context);
//     }
//   }
// }

